syntax = "proto3";

package tradinggateway.v1;

option go_package = "github.com/parallelbots/trading-gateway/pkg/gen/tradinggateway/v1;tradinggatewayv1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

enum OrderSide {
  ORDER_SIDE_UNSPECIFIED = 0;
  ORDER_SIDE_BUY = 1;
  ORDER_SIDE_SELL = 2;
}

enum TimeInForce {
  TIME_IN_FORCE_UNSPECIFIED = 0;
  TIME_IN_FORCE_GTC = 1; // Good-Til-Cancelled
  TIME_IN_FORCE_IOC = 2; // Immediate-Or-Cancel
  TIME_IN_FORCE_FOK = 3; // Fill-Or-Kill
}

message OrderRequest {
  string client_order_id = 1;
  string venue = 2;
  string symbol = 3;
  OrderSide side = 4;
  double quantity = 5;
  double price = 6;
  TimeInForce time_in_force = 7;
  map<string, string> attributes = 8; // Venue-specific extras
  string idempotency_key = 9;
}

message OrderResponse {
  string client_order_id = 1;
  string venue_order_id = 2;
  string status = 3;
  google.protobuf.Timestamp accepted_at = 4;
}

message CancelRequest {
  string venue = 1;
  string venue_order_id = 2;
  string client_order_id = 3;
  string idempotency_key = 4;
}

message CancelResponse {
  string venue_order_id = 1;
  string status = 2;
}

message OrderStatusRequest {
  string venue = 1;
  string client_order_id = 2;
  string venue_order_id = 3;
}

message OrderStatus {
  string venue_order_id = 1;
  string client_order_id = 2;
  string status = 3;
  double filled_quantity = 4;
  double average_price = 5;
  google.protobuf.Timestamp last_update = 6;
}

message StreamFillsRequest {
  string venue = 1;
  repeated string symbols = 2;
}

message FillEvent {
  string venue = 1;
  string venue_order_id = 2;
  string client_order_id = 3;
  double fill_quantity = 4;
  double fill_price = 5;
  google.protobuf.Timestamp fill_time = 6;
  map<string, string> attributes = 7;
}

service TradingGateway {
  rpc PlaceOrder(OrderRequest) returns (OrderResponse);
  rpc CancelOrder(CancelRequest) returns (CancelResponse);
  rpc GetOrderStatus(OrderStatusRequest) returns (OrderStatus);
  rpc StreamFills(StreamFillsRequest) returns (stream FillEvent);
}
