// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/trading_gateway.proto

package tradinggatewayv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradingGateway_PlaceOrder_FullMethodName     = "/tradinggateway.v1.TradingGateway/PlaceOrder"
	TradingGateway_CancelOrder_FullMethodName    = "/tradinggateway.v1.TradingGateway/CancelOrder"
	TradingGateway_GetOrderStatus_FullMethodName = "/tradinggateway.v1.TradingGateway/GetOrderStatus"
	TradingGateway_StreamFills_FullMethodName    = "/tradinggateway.v1.TradingGateway/StreamFills"
)

// TradingGatewayClient is the client API for TradingGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingGatewayClient interface {
	PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	GetOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatus, error)
	StreamFills(ctx context.Context, in *StreamFillsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FillEvent], error)
}

type tradingGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingGatewayClient(cc grpc.ClientConnInterface) TradingGatewayClient {
	return &tradingGatewayClient{cc}
}

func (c *tradingGatewayClient) PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, TradingGateway_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingGatewayClient) CancelOrder(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, TradingGateway_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingGatewayClient) GetOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, TradingGateway_GetOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingGatewayClient) StreamFills(ctx context.Context, in *StreamFillsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FillEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradingGateway_ServiceDesc.Streams[0], TradingGateway_StreamFills_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamFillsRequest, FillEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingGateway_StreamFillsClient = grpc.ServerStreamingClient[FillEvent]

// TradingGatewayServer is the server API for TradingGateway service.
// All implementations must embed UnimplementedTradingGatewayServer
// for forward compatibility.
type TradingGatewayServer interface {
	PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	CancelOrder(context.Context, *CancelRequest) (*CancelResponse, error)
	GetOrderStatus(context.Context, *OrderStatusRequest) (*OrderStatus, error)
	StreamFills(*StreamFillsRequest, grpc.ServerStreamingServer[FillEvent]) error
	mustEmbedUnimplementedTradingGatewayServer()
}

// UnimplementedTradingGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradingGatewayServer struct{}

func (UnimplementedTradingGatewayServer) PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedTradingGatewayServer) CancelOrder(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedTradingGatewayServer) GetOrderStatus(context.Context, *OrderStatusRequest) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatus not implemented")
}
func (UnimplementedTradingGatewayServer) StreamFills(*StreamFillsRequest, grpc.ServerStreamingServer[FillEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFills not implemented")
}
func (UnimplementedTradingGatewayServer) mustEmbedUnimplementedTradingGatewayServer() {}
func (UnimplementedTradingGatewayServer) testEmbeddedByValue()                        {}

// UnsafeTradingGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingGatewayServer will
// result in compilation errors.
type UnsafeTradingGatewayServer interface {
	mustEmbedUnimplementedTradingGatewayServer()
}

func RegisterTradingGatewayServer(s grpc.ServiceRegistrar, srv TradingGatewayServer) {
	// If the following call pancis, it indicates UnimplementedTradingGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradingGateway_ServiceDesc, srv)
}

func _TradingGateway_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingGatewayServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingGateway_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingGatewayServer).PlaceOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingGateway_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingGatewayServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingGateway_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingGatewayServer).CancelOrder(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingGateway_GetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingGatewayServer).GetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingGateway_GetOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingGatewayServer).GetOrderStatus(ctx, req.(*OrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingGateway_StreamFills_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFillsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingGatewayServer).StreamFills(m, &grpc.GenericServerStream[StreamFillsRequest, FillEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingGateway_StreamFillsServer = grpc.ServerStreamingServer[FillEvent]

// TradingGateway_ServiceDesc is the grpc.ServiceDesc for TradingGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tradinggateway.v1.TradingGateway",
	HandlerType: (*TradingGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _TradingGateway_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _TradingGateway_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrderStatus",
			Handler:    _TradingGateway_GetOrderStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFills",
			Handler:       _TradingGateway_StreamFills_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/trading_gateway.proto",
}
