openapi: 3.0.3
info:
  title: CLOB (Central Limit Order Book) API
  description: API for interacting with the Central Limit Order Book system, providing orderbook data, prices, midpoints, and spreads
  version: 1.0.0
  contact:
    name: CLOB API Team
  license:
    name: MIT

servers:
  - url: https://clob.polymarket.com/
    description: Production server

paths:
  /book:
    get:
      summary: Get order book summary
      description: Retrieves the order book summary for a specific token
      tags:
        - Orderbook
      parameters:
        - name: token_id
          in: query
          required: true
          schema:
            type: string
          description: The unique identifier for the token
          example: "1234567890"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBookSummary'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid token id"
        '404':
          description: Order book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "No orderbook exists for the requested token id"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "error getting the orderbook"

  /books:
    post:
      summary: Get multiple order books summaries by request
      description: Retrieves order book summaries for specified tokens via POST request
      tags:
        - Orderbook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BookRequest'
              maxItems: 500
            example:
              - token_id: "1234567890"
              - token_id: "0987654321"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderBookSummary'
        '400':
          description: Bad request - Invalid payload or exceeds limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_payload:
                  value:
                    error: "Invalid payload"
                exceeds_limit:
                  value:
                    error: "Payload exceeds the limit"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /price:
    get:
      summary: Get market price
      description: Retrieves the market price for a specific token and side
      tags:
        - Pricing
      parameters:
        - name: token_id
          in: query
          required: true
          schema:
            type: string
          description: The unique identifier for the token
          example: "1234567890"
        - name: side
          in: query
          required: true
          schema:
            type: string
            enum: [BUY, SELL]
          description: The side of the market (BUY or SELL)
          example: "BUY"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_token:
                  value:
                    error: "Invalid token id"
                invalid_side:
                  value:
                    error: "Invalid side"
        '404':
          description: Order book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "No orderbook exists for the requested token id"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /prices:
    get:
      summary: Get multiple market prices
      description: Retrieves market prices for multiple tokens and sides
      tags:
        - Pricing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Get multiple market prices by request
      description: Retrieves market prices for specified tokens and sides via POST request
      tags:
        - Pricing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceRequest'
              maxItems: 500
            example:
              - token_id: "1234567890"
                side: "BUY"
              - token_id: "0987654321"
                side: "SELL"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricesResponse'
        '400':
          description: Bad request - Invalid payload, exceeds limit, or invalid side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_payload:
                  value:
                    error: "Invalid payload"
                exceeds_limit:
                  value:
                    error: "Payload exceeds the limit"
                invalid_side:
                  value:
                    error: "Invalid side"
        '404':
          description: Order book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "No orderbook exists for the requested token id"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /midpoint:
    get:
      summary: Get midpoint price
      description: Retrieves the midpoint price for a specific token
      tags:
        - Pricing
      parameters:
        - name: token_id
          in: query
          required: true
          schema:
            type: string
          description: The unique identifier for the token
          example: "1234567890"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MidpointResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid token id"
        '404':
          description: Order book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "No orderbook exists for the requested token id"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /spreads:
    post:
      summary: Get bid-ask spreads
      description: Retrieves bid-ask spreads for multiple tokens
      tags:
        - Spreads
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BookRequest'
              maxItems: 500
            example:
              - token_id: "1234567890"
              - token_id: "0987654321"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpreadsResponse'
        '400':
          description: Bad request - Invalid payload or exceeds limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_payload:
                  value:
                    error: "Invalid payload"
                exceeds_limit:
                  value:
                    error: "Payload exceeds the limit"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "error getting the spread"

  /prices-history:
    get:
      summary: Get price history for a traded token
      description: Fetches historical price data for a specified market token
      tags:
        - Pricing
      parameters:
        - name: market
          in: query
          required: true
          schema:
            type: string
          description: The CLOB token ID for which to fetch price history
          example: "1234567890"
        - name: startTs
          in: query
          required: false
          schema:
            type: number
          description: The start time, a Unix timestamp in UTC
          example: 1697875200
        - name: endTs
          in: query
          required: false
          schema:
            type: number
          description: The end time, a Unix timestamp in UTC
          example: 1697961600
        - name: interval
          in: query
          required: false
          schema:
            type: string
            enum: [1m, 1w, 1d, 6h, 1h, max]
          description: A string representing a duration ending at the current time. Mutually exclusive with startTs and endTs
          example: "1d"
        - name: fidelity
          in: query
          required: false
          schema:
            type: number
          description: The resolution of the data, in minutes
          example: 60
      responses:
        '200':
          description: A list of timestamp/price pairs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceHistoryResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Market not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    OrderBookSummary:
      type: object
      required:
        - market
        - asset_id
        - timestamp
        - hash
        - bids
        - asks
        - min_order_size
        - tick_size
        - neg_risk
      properties:
        market:
          type: string
          description: Market identifier
          example: "0x1b6f76e5b8587ee896c35847e12d11e75290a8c3934c5952e8a9d6e4c6f03cfa"
        asset_id:
          type: string
          description: Asset identifier
          example: "1234567890"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the order book snapshot
          example: "2023-10-01T12:00:00Z"
        hash:
          type: string
          description: Hash of the order book state
          example: "0xabc123def456..."
        bids:
          type: array
          items:
            $ref: '#/components/schemas/OrderLevel'
          description: Array of bid levels
        asks:
          type: array
          items:
            $ref: '#/components/schemas/OrderLevel'
          description: Array of ask levels
        min_order_size:
          type: string
          description: Minimum order size for this market
          example: "0.001"
        tick_size:
          type: string
          description: Minimum price increment
          example: "0.01"
        neg_risk:
          type: boolean
          description: Whether negative risk is enabled
          example: false

    OrderLevel:
      type: object
      required:
        - price
        - size
      properties:
        price:
          type: string
          description: Price level (as string to maintain precision)
          example: "1800.50"
        size:
          type: string
          description: Total size at this price level
          example: "10.5"

    BookRequest:
      type: object
      required:
        - token_id
      properties:
        token_id:
          type: string
          description: The unique identifier for the token
          example: "1234567890"
        side:
          type: string
          enum: [BUY, SELL]
          description: Optional side parameter for certain operations
          example: "BUY"

    PriceRequest:
      type: object
      required:
        - token_id
        - side
      properties:
        token_id:
          type: string
          description: The unique identifier for the token
          example: "1234567890"
        side:
          type: string
          enum: [BUY, SELL]
          description: The side of the market (BUY or SELL)
          example: "BUY"

    PriceResponse:
      type: object
      required:
        - price
      properties:
        price:
          type: string
          description: The market price (as string to maintain precision)
          example: "1800.50"

    PricesResponse:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: string
      description: Map of token_id to side to price
      example:
        "1234567890":
          "BUY": "1800.50"
          "SELL": "1801.00"
        "0987654321":
          "BUY": "50.25"
          "SELL": "50.30"

    MidpointResponse:
      type: object
      required:
        - mid
      properties:
        mid:
          type: string
          description: The midpoint price (as string to maintain precision)
          example: "1800.75"

    SpreadsResponse:
      type: object
      additionalProperties:
        type: string
      description: Map of token_id to spread value
      example:
        "1234567890": "0.50"
        "0987654321": "0.05"

    PriceHistoryResponse:
      type: object
      required:
        - history
      properties:
        history:
          type: array
          items:
            type: object
            required:
              - t
              - p
            properties:
              t:
                type: number
                description: UTC timestamp
                example: 1697875200
              p:
                type: number
                description: Price
                example: 1800.75

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Invalid token id"

  parameters:
    TokenIdParam:
      name: token_id
      in: query
      required: true
      schema:
        type: string
      description: The unique identifier for the token
      example: "1234567890"

    SideParam:
      name: side
      in: query
      required: true
      schema:
        type: string
        enum: [BUY, SELL]
      description: The side of the market (BUY or SELL)
      example: "BUY"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Orderbook
    description: Order book related operations
  - name: Pricing
    description: Price and midpoint operations
  - name: Spreads
    description: Spread calculation operations
