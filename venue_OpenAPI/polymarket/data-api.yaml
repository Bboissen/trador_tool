openapi: 3.0.3
info:
  title: Polymarket Data API
  version: 1.0.0
  description: |
    HTTP API for Polymarket data. This specification documents all public routes.
servers:
  - url: https://data-api.polymarket.com
    description: Relative server (same host)
tags:
  - name: Health
  - name: Core
  - name: Misc
components:
  schemas:
    Address:
      type: string
      description: User Profile Address (0x-prefixed, 40 hex chars)
      pattern: ^0x[a-fA-F0-9]{40}$
      example: "0x56687bf447db6ffa42ffe2204a05edaa20f55839"
    Hash64:
      type: string
      description: 0x-prefixed 64-hex string
      pattern: ^0x[a-fA-F0-9]{64}$
      example: "0xdd22472e552920b8438158ea7238bfadfa4f736aa4cee91a6b86c39ead110917"
    HealthResponse:
      type: object
      properties:
        data:
          type: string
          example: OK
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
        - error

    Position:
      type: object
      properties:
        proxyWallet: { $ref: '#/components/schemas/Address' }
        asset: { type: string }
        conditionId: { $ref: '#/components/schemas/Hash64' }
        size: { type: number }
        avgPrice: { type: number }
        initialValue: { type: number }
        currentValue: { type: number }
        cashPnl: { type: number }
        percentPnl: { type: number }
        totalBought: { type: number }
        realizedPnl: { type: number }
        percentRealizedPnl: { type: number }
        curPrice: { type: number }
        redeemable: { type: boolean }
        mergeable: { type: boolean }
        title: { type: string }
        slug: { type: string }
        icon: { type: string }
        eventSlug: { type: string }
        outcome: { type: string }
        outcomeIndex: { type: integer }
        oppositeOutcome: { type: string }
        oppositeAsset: { type: string }
        endDate: { type: string }
        negativeRisk: { type: boolean }

    ClosedPosition:
      type: object
      properties:
        proxyWallet: { $ref: '#/components/schemas/Address' }
        asset: { type: string }
        conditionId: { $ref: '#/components/schemas/Hash64' }
        avgPrice: { type: number }
        totalBought: { type: number }
        realizedPnl: { type: number }
        curPrice: { type: number }
        title: { type: string }
        slug: { type: string }
        icon: { type: string }
        eventSlug: { type: string }
        outcome: { type: string }
        outcomeIndex: { type: integer }
        oppositeOutcome: { type: string }
        oppositeAsset: { type: string }
        endDate: { type: string }

    Trade:
      type: object
      properties:
        proxyWallet: { $ref: '#/components/schemas/Address' }
        side:
          type: string
          enum: [BUY, SELL]
        asset: { type: string }
        conditionId: { $ref: '#/components/schemas/Hash64' }
        size: { type: number }
        price: { type: number }
        timestamp: { type: integer, format: int64 }
        title: { type: string }
        slug: { type: string }
        icon: { type: string }
        eventSlug: { type: string }
        outcome: { type: string }
        outcomeIndex: { type: integer }
        name: { type: string }
        pseudonym: { type: string }
        bio: { type: string }
        profileImage: { type: string }
        profileImageOptimized: { type: string }
        transactionHash: { type: string }

    Activity:
      type: object
      properties:
        proxyWallet: { $ref: '#/components/schemas/Address' }
        timestamp: { type: integer, format: int64 }
        conditionId: { $ref: '#/components/schemas/Hash64' }
        type:
          type: string
          enum: [TRADE, SPLIT, MERGE, REDEEM, REWARD, CONVERSION]
        size: { type: number }
        usdcSize: { type: number }
        transactionHash: { type: string }
        price: { type: number }
        asset: { type: string }
        side:
          type: string
          enum: [BUY, SELL]
        outcomeIndex: { type: integer }
        title: { type: string }
        slug: { type: string }
        icon: { type: string }
        eventSlug: { type: string }
        outcome: { type: string }
        name: { type: string }
        pseudonym: { type: string }
        bio: { type: string }
        profileImage: { type: string }
        profileImageOptimized: { type: string }

    Holder:
      type: object
      properties:
        proxyWallet: { $ref: '#/components/schemas/Address' }
        bio: { type: string }
        asset: { type: string }
        pseudonym: { type: string }
        amount: { type: number }
        displayUsernamePublic: { type: boolean }
        outcomeIndex: { type: integer }
        name: { type: string }
        profileImage: { type: string }
        profileImageOptimized: { type: string }

    MetaHolder:
      type: object
      properties:
        token: { type: string }
        holders:
          type: array
          items: { $ref: '#/components/schemas/Holder' }

    Traded:
      type: object
      properties:
        user: { $ref: '#/components/schemas/Address' }
        traded: { type: integer }

    RevisionEntry:
      type: object
      properties:
        revision: { type: string }
        timestamp: { type: integer }

    RevisionPayload:
      type: object
      properties:
        questionID: { $ref: '#/components/schemas/Hash64' }
        revisions:
          type: array
          items: { $ref: '#/components/schemas/RevisionEntry' }

    Value:
      type: object
      properties:
        user: { $ref: '#/components/schemas/Address' }
        value: { type: number }

    OpenInterest:
      type: object
      properties:
        market: { $ref: '#/components/schemas/Hash64' }
        value: { type: number }

    MarketVolume:
      type: object
      properties:
        market: { $ref: '#/components/schemas/Hash64' }
        value: { type: number }

    LiveVolume:
      type: object
      properties:
        total: { type: number }
        markets:
          type: array
          items: { $ref: '#/components/schemas/MarketVolume' }

    OtherSize:
      type: object
      properties:
        id: { type: integer }
        user: { $ref: '#/components/schemas/Address' }
        size: { type: number }

paths:
  /:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /positions:
    get:
      tags: [Core]
      summary: Get current positions for a user
      description: Returns positions filtered by user and optional filters.
      parameters:
        - in: query
          name: user
          required: true
          schema: { $ref: '#/components/schemas/Address' }
          description: User address (required)
        - in: query
          name: market
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: '#/components/schemas/Hash64' }
          description: Comma-separated list of condition IDs. Mutually exclusive with eventId.
        - in: query
          name: eventId
          style: form
          explode: false
          schema:
            type: array
            items: { type: integer, minimum: 1 }
          description: Comma-separated list of event IDs. Mutually exclusive with market.
        - in: query
          name: sizeThreshold
          schema: { type: number, default: 1.0, minimum: 0 }
        - in: query
          name: redeemable
          schema: { type: boolean, default: false }
        - in: query
          name: mergeable
          schema: { type: boolean, default: false }
        - in: query
          name: limit
          schema: { type: integer, default: 100, minimum: 0, maximum: 500 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0, maximum: 10000 }
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [CURRENT, INITIAL, TOKENS, CASHPNL, PERCENTPNL, TITLE, RESOLVING, PRICE, AVGPRICE]
            default: TOKENS
        - in: query
          name: sortDirection
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
        - in: query
          name: title
          schema: { type: string, maxLength: 100 }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Position' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /trades:
    get:
      tags: [Core]
      summary: Get trades for a user or markets
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 100, minimum: 0, maximum: 10000 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0, maximum: 10000 }
        - in: query
          name: takerOnly
          schema: { type: boolean, default: true }
        - in: query
          name: filterType
          schema:
            type: string
            enum: [CASH, TOKENS]
          description: Must be provided together with filterAmount.
        - in: query
          name: filterAmount
          schema: { type: number, minimum: 0 }
          description: Must be provided together with filterType.
        - in: query
          name: market
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: '#/components/schemas/Hash64' }
          description: Comma-separated list of condition IDs. Mutually exclusive with eventId.
        - in: query
          name: eventId
          style: form
          explode: false
          schema:
            type: array
            items: { type: integer, minimum: 1 }
          description: Comma-separated list of event IDs. Mutually exclusive with market.
        - in: query
          name: user
          schema: { $ref: '#/components/schemas/Address' }
        - in: query
          name: side
          schema:
            type: string
            enum: [BUY, SELL]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Trade' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /activity:
    get:
      tags: [Core]
      summary: Get user activity
      description: Returns on-chain activity for a user.
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 100, minimum: 0, maximum: 500 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0, maximum: 10000 }
        - in: query
          name: user
          required: true
          schema: { $ref: '#/components/schemas/Address' }
        - in: query
          name: market
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: '#/components/schemas/Hash64' }
          description: Comma-separated list of condition IDs. Mutually exclusive with eventId.
        - in: query
          name: eventId
          style: form
          explode: false
          schema:
            type: array
            items: { type: integer, minimum: 1 }
          description: Comma-separated list of event IDs. Mutually exclusive with market.
        - in: query
          name: type
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [TRADE, SPLIT, MERGE, REDEEM, REWARD, CONVERSION]
        - in: query
          name: start
          schema: { type: integer, minimum: 0 }
        - in: query
          name: end
          schema: { type: integer, minimum: 0 }
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [TIMESTAMP, TOKENS, CASH]
            default: TIMESTAMP
        - in: query
          name: sortDirection
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
        - in: query
          name: side
          schema:
            type: string
            enum: [BUY, SELL]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Activity' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /holders:
    get:
      tags: [Core]
      summary: Get top holders for markets
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 100, minimum: 0, maximum: 500 }
        - in: query
          name: market
          required: true
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: '#/components/schemas/Hash64' }
          description: Comma-separated list of condition IDs.
        - in: query
          name: minBalance
          schema: { type: integer, default: 1, minimum: 0, maximum: 999999 }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/MetaHolder' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /traded:
    get:
      tags: [Misc]
      summary: Get total markets a user has traded
      parameters:
        - in: query
          name: user
          required: true
          schema: { $ref: '#/components/schemas/Address' }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Traded' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /revisions:
    get:
      tags: [Misc]
      "x-excluded": true
      summary: Get moderated revisions for a question
      parameters:
        - in: query
          name: questionID
          required: true
          schema: { $ref: '#/components/schemas/Hash64' }
        - in: query
          name: limit
          schema: { type: integer, default: 100, minimum: 0, maximum: 500 }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/RevisionPayload' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /value:
    get:
      tags: [Core]
      summary: Get total value of a user's positions
      parameters:
        - in: query
          name: user
          required: true
          schema: { $ref: '#/components/schemas/Address' }
        - in: query
          name: market
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: '#/components/schemas/Hash64' }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Value' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /oi:
    get:
      tags: [Misc]
      summary: Get open interest
      parameters:
        - in: query
          name: market
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: '#/components/schemas/Hash64' }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/OpenInterest' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /live-volume:
    get:
      tags: [Misc]
      summary: Get live volume for an event
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/LiveVolume' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /closed-positions:
    get:
      tags: [Core]
      summary: Get closed positions for a user
      description: Fetches closed positions for a user(address)
      parameters:
        - in: query
          name: user
          required: true
          schema: { $ref: '#/components/schemas/Address' }
          description: The address of the user in question
        - in: query
          name: market
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: '#/components/schemas/Hash64' }
          description: The conditionId of the market in question. Supports multiple csv separated values. Cannot be used with the eventId param.
        - in: query
          name: title
          schema: { type: string, maxLength: 100 }
          description: Filter by market title
        - in: query
          name: eventId
          style: form
          explode: false
          schema:
            type: array
            items: { type: integer, minimum: 1 }
          description: The event id of the event in question. Supports multiple csv separated values. Returns positions for all markets for those event ids. Cannot be used with the market param.
        - in: query
          name: limit
          schema: { type: integer, default: 50, minimum: 0, maximum: 500 }
          description: The max number of positions to return
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0, maximum: 10000 }
          description: The starting index for pagination
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [REALIZEDPNL, TITLE, PRICE, AVGPRICE]
            default: REALIZEDPNL
          description: The sort criteria
        - in: query
          name: sortDirection
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
          description: The sort direction
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ClosedPosition' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /other:
    get:
      tags: [Misc]
      "x-excluded": true
      summary: Get "Other" size for an augmented neg risk event and user
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
        - in: query
          name: user
          required: true
          schema: { $ref: '#/components/schemas/Address' }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/OtherSize' }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

