// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: fills.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listOrderFillsBasic = `-- name: ListOrderFillsBasic :many
SELECT
  id::text       AS id,
  order_id::text AS order_id,
  idempotency_key,
  amount_in::text  AS amount_in,
  amount_out::text AS amount_out,
  price::text      AS price,
  status::text     AS status,
  executed_at
FROM trading.order_fills
WHERE order_id = $1
  AND ($2::timestamptz IS NULL OR executed_at > $2)
ORDER BY executed_at ASC
LIMIT $3
`

type ListOrderFillsBasicParams struct {
	OrderID string             `json:"order_id"`
	Column2 pgtype.Timestamptz `json:"column_2"`
	Limit   int32              `json:"limit"`
}

type ListOrderFillsBasicRow struct {
	ID             string             `json:"id"`
	OrderID        string             `json:"order_id"`
	IdempotencyKey string             `json:"idempotency_key"`
	AmountIn       string             `json:"amount_in"`
	AmountOut      string             `json:"amount_out"`
	Price          string             `json:"price"`
	Status         string             `json:"status"`
	ExecutedAt     pgtype.Timestamptz `json:"executed_at"`
}

func (q *Queries) ListOrderFillsBasic(ctx context.Context, arg ListOrderFillsBasicParams) ([]ListOrderFillsBasicRow, error) {
	rows, err := q.db.Query(ctx, listOrderFillsBasic, arg.OrderID, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrderFillsBasicRow{}
	for rows.Next() {
		var i ListOrderFillsBasicRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.IdempotencyKey,
			&i.AmountIn,
			&i.AmountOut,
			&i.Price,
			&i.Status,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
