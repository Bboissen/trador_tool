// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOrderBasic = `-- name: GetOrderBasic :one
SELECT
  id::text AS id,
  strategy_id,
  adapter_key,
  side::text   AS side,
  type::text   AS type,
  tif::text    AS tif,
  status::text AS status,
  amount_in::text       AS amount_in,
  filled_amount::text   AS filled_amount,
  created_at,
  updated_at
FROM trading.orders
WHERE id = $1
`

type GetOrderBasicRow struct {
	ID           string             `json:"id"`
	StrategyID   int32              `json:"strategy_id"`
	AdapterKey   string             `json:"adapter_key"`
	Side         string             `json:"side"`
	Type         string             `json:"type"`
	Tif          string             `json:"tif"`
	Status       string             `json:"status"`
	AmountIn     string             `json:"amount_in"`
	FilledAmount string             `json:"filled_amount"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetOrderBasic(ctx context.Context, id string) (GetOrderBasicRow, error) {
	row := q.db.QueryRow(ctx, getOrderBasic, id)
	var i GetOrderBasicRow
	err := row.Scan(
		&i.ID,
		&i.StrategyID,
		&i.AdapterKey,
		&i.Side,
		&i.Type,
		&i.Tif,
		&i.Status,
		&i.AmountIn,
		&i.FilledAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByIdempotencyBasic = `-- name: GetOrderByIdempotencyBasic :one
SELECT
  id::text AS id,
  strategy_id,
  adapter_key,
  side::text   AS side,
  type::text   AS type,
  tif::text    AS tif,
  status::text AS status,
  amount_in::text       AS amount_in,
  filled_amount::text   AS filled_amount,
  created_at,
  updated_at
FROM trading.orders
WHERE idempotency_key = $1
`

type GetOrderByIdempotencyBasicRow struct {
	ID           string             `json:"id"`
	StrategyID   int32              `json:"strategy_id"`
	AdapterKey   string             `json:"adapter_key"`
	Side         string             `json:"side"`
	Type         string             `json:"type"`
	Tif          string             `json:"tif"`
	Status       string             `json:"status"`
	AmountIn     string             `json:"amount_in"`
	FilledAmount string             `json:"filled_amount"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetOrderByIdempotencyBasic(ctx context.Context, idempotencyKey string) (GetOrderByIdempotencyBasicRow, error) {
	row := q.db.QueryRow(ctx, getOrderByIdempotencyBasic, idempotencyKey)
	var i GetOrderByIdempotencyBasicRow
	err := row.Scan(
		&i.ID,
		&i.StrategyID,
		&i.AdapterKey,
		&i.Side,
		&i.Type,
		&i.Tif,
		&i.Status,
		&i.AmountIn,
		&i.FilledAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
